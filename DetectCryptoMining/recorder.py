from datetime import datetime
import pickle


class Recorder:
    """
    Defines how log files and detection history should be handled.

    :param firstInstance: A boolean defining whether this is the first created instance of :class:`recorder.Recorder`.
    :type firstInstance: bool
    """

    def __init__(self, firstInstance):
        if firstInstance == True:
            self.detectionHistory = {}
            self.createDetectionHistory()

    # Logs rules that have been met at the time they were detected in the format
    # 2020-02-18 15:28:10.982631 | firefox.exe ['CPUPercentageCheck'].
    # param rulesMet: A dictionary whose keys are the supsicous proccesses
    # and the corresponding values are the rules the processes has met during
    # the detection round.
    def writeLog(self, rulesMet):
        """
        Logs rules that have been met at the time they were detected in the format 2020-02-18 15:28:10.982631 | firefox.exe ['CPUPercentageCheck'].

        :param rulesMet: A dictionary whose keys are the supsicous proccesses and the corresponding values are the rules the processes has met during the detection round.
        :type rulesMet: dict
        """

        formattedLog = str(datetime.now())
        formattedLog += " | "
        index = 0
        lenRuleList = len(rulesMet)

        for key in rulesMet:

            if index != (lenRuleList - 1):
                formattedLog += key + " " + str(rulesMet[key]) + ", "
            else:
                formattedLog += key + " " + str(rulesMet[key]) + "."

        formattedLog += '\n'

        logFile = open("detectionLog.txt", "a")
        logFile.write(formattedLog)
        logFile.close()

    def createDetectionHistory(self):
        """Creates detectionHistory pickle file and dumps the newly initalised detectionHistory dictionary within it."""
        historyFile = open("detectionHistory.pkl", "wb")
        pickle.dump(self.detectionHistory, historyFile)
        historyFile.close()

    # Writes an updated version of the detectionHistory dictionary to the
    # detection history file using detection information collected from the most
    # recent round.
    def updateDetectionHistory(self, rulesMetDict):
        """
        Writes an updated version of the detectionHistory dictionary to the detection history file using detection information collected from the most recent round.

        :param rulesMetDict: A dictionary whose keys are the processes that have met detections rules and their corresponding value is a list of all the detection rules that process has met.
        :type: rulesMetDict: dict
        """

        historyFile = open("detectionHistory.pkl", "rb")
        self.detectionHistory = pickle.load(historyFile)
        historyFile.close()

        for key in rulesMetDict:
            if key in self.detectionHistory:
                for rule in rulesMetDict[key]:
                    if rule in self.detectionHistory[key]:
                        self.detectionHistory[key][rule] += 1
                    else:
                        self.detectionHistory[key][rule] = 1
            else:
                tempRulesDict = {}
                for rule in rulesMetDict[key]:
                    tempRulesDict[rule] = 1

                self.detectionHistory[key] = tempRulesDict

        historyFile = open("detectionHistory.pkl", "wb")
        pickle.dump(self.detectionHistory, historyFile)
        historyFile.close()

    def readDetectionHistory(self):
        """
        Reads the detectionHistory from the detectionHistory.pkl file.

        :return: A dictionary representing the detection history read from the pickle file.
        :rtype: dict
        """
        historyFile = open("detectionHistory.pkl", "rb")
        history = pickle.load(historyFile)
        historyFile.close()

        return history

    def readPoolIPs(self):
        """
        Reads the stored mining pool IP addresses from the poolIPs.pkl file.

        :return: A list of the IP addresses read from the pickle file.
        :rtype: list
        """
        IPFile = open("poolIPs.pkl", "rb")
        IPs = pickle.load(IPFile)
        IPFile.close()

        return IPs

from recorder import Recorder


class CPUPercentageCheck():
    """Checks whether cpu utilisation of data passed is suspiciously high"""

    def check(cpuMonitoringData):
        metOnce = False

        for x in cpuMonitoringData[1:len(cpuMonitoringData)]:
            if(float(x) >= 60):
                metOnce = True
            else:
                metOnce = False
        return metOnce


class MemoryUsageCheck():
    """Checks whether memory consumption of data passed is suspiciously high"""
    def check(memoryMonitoringData):
        for x in memoryMonitoringData[1:len(memoryMonitoringData)]:
            if(float(x) >= 1):
                return True
            else:
                return False


class SustainedHighCPUCheck():
    """Checks whether CPUPercentageCheck has been met on multiple occations for a given process."""
    def check(process):  # need to pass process name to rules
        detectionHist = Recorder(False).readDetectionHistory()
        processDict = {}
        if process in detectionHist:
            processDict = detectionHist[process]
            detectionCount = processDict["CPUPercentageCheck"]

            if detectionCount % 4 == 0:
                return True
            else:
                return False

        return False


class SustainedHighMemoryCheck():
    """Checks whether MemoryUsageCheck has been met on multiple occations for a given process."""

    def check(process):
        rec = Recorder(False)
        detectionHist = rec.readDetectionHistory()
        processDict = {}
        detectionCount = 0

        if process in detectionHist:
            processDict = detectionHist[process]
            processDict = detectionHist[process]
            detectionCount = processDict["MemoryUsageCheck"]
            if detectionCount % 4 == 0:
                return True
            else:
                return False

        return False


class MiningPoolConnection():
    """Checks whether a tcp connection has been made with a mining pool IP address for a given process."""

    def check(connectionData):
        rec = Recorder(False)
        poolIPs = rec.readPoolIPs()
        if connectionData in poolIPs:
            return True
        else:
            return False

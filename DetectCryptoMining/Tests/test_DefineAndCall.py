import unittest
import sys
import pickle
sys.path.append("..")
from recorder import Recorder
from MatchRules import DefineAndCall




class TestDefineAndCall(unittest.TestCase):

    def test_determineRelevantRule1(self):
        recordClass = Recorder(True)
        testMonData = {'chrome.exe': ['Mem', 2.6], 'xmrig.exe': ['Mem', 5],
                       'firefox.exe': ['Mem', 0.5]}
        testConfig = {'CPU': ['CPUPercentageCheck', 'SustainedHighCPUCheck'],
                      'Mem': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['MemoryUsageCheck'],
                          'xmrig.exe': ['MemoryUsageCheck']}

        output = DefineAndCall.determineRelevantRule(self, testMonData, testConfig)

        self.assertIsNotNone(output)
        self.assertEqual(output, expectedOutput)

    def test_determineRelevantRule2(self):
        recordClass = Recorder(True)
        testMonData = {'chrome.exe': ['Mem', 0.5], 'xmrig.exe': ['Mem', 2.499],
                       'firefox.exe': ['Mem', 0.5]}
        testConfig = {'CPU': ['CPUPercentageCheck', 'SustainedHighCPUCheck'],
                      'Mem': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {}

        output = DefineAndCall.determineRelevantRule(self, testMonData, testConfig)

        self.assertIsNotNone(output)
        self.assertEqual(output, expectedOutput)

    def test_determineRelevantRule3(self):
        recordClass = Recorder(True)
        testMonData = {'chrome.exe': ['CPU', 60], 'xmrig.exe': ['CPU', 59.9],
                       'firefox.exe': ['CPU', 66]}
        testConfig = {'CPU': ['CPUPercentageCheck', 'SustainedHighCPUCheck'],
                      'Mem': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['CPUPercentageCheck'],
                          'firefox.exe': ['CPUPercentageCheck']}

        output = DefineAndCall.determineRelevantRule(self, testMonData, testConfig)

        self.assertIsNotNone(output)
        self.assertEqual(output, expectedOutput)

    def test_determineRelevantRule4(self):
        recordClass = Recorder(True)
        testMonData = {'chrome.exe': ['CPU', 60], 'xmrig.exe': ['CPU', 59.9],
                       'firefox.exe': ['CPU', 66], 'spotify.exe': ['CPU', 32]}
        testConfig = {'CPU': ['CPUPercentageCheck', 'SustainedHighCPUCheck'],
                      'Mem': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['CPUPercentageCheck'],
                          'firefox.exe': ['CPUPercentageCheck']}

        output = DefineAndCall.determineRelevantRule(self, testMonData, testConfig)

        self.assertIsNotNone(output)
        self.assertEqual(output, expectedOutput)

    def test_determineRelevantRule5(self):
        recordClass = Recorder(False)
        detectionHistory = {'chrome.exe': {'CPUPercentageCheck': 4}, 'xmrig.exe': {'CPUPercentageCheck': 8},
                            'firefox.exe': {'CPUPercentageCheck': 7, 'SustainedHighCPUCheck': 1}}
        fh = open("detectionHistory.pkl", "wb")
        pickle.dump(detectionHistory, fh)
        fh.close()

        testMonData = {'chrome.exe': ['CPU', 60], 'xmrig.exe': ['CPU', 59.9],
                       'firefox.exe': ['CPU', 66], 'spotify.exe': ['CPU', 32]}
        testConfig = {'CPU': ['CPUPercentageCheck', 'SustainedHighCPUCheck'],
                      'Mem': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['CPUPercentageCheck', 'SustainedHighCPUCheck'], 'firefox.exe': [
            'CPUPercentageCheck'], 'xmrig.exe': ['SustainedHighCPUCheck']}

        output = DefineAndCall.determineRelevantRule(self, testMonData, testConfig)

        self.assertIsNotNone(output)
        self.assertEqual(output, expectedOutput)

    def test_determineRelevantRule6(self):
        recordClass = Recorder(False)
        detectionHistory = {'chrome.exe': {'MemoryUsageCheck': 4}, 'xmrig.exe': {'MemoryUsageCheck': 8},
                            'firefox.exe': {'MemoryUsageCheck': 7, 'SustainedHighMemoryCheck': 1}}
        fh = open("detectionHistory.pkl", "wb")
        pickle.dump(detectionHistory, fh)
        fh.close()

        testMonData = {'chrome.exe': ['Mem', 2.5], 'xmrig.exe': ['Mem', 2.499],
                       'firefox.exe': ['Mem', 2.8], 'spotify.exe': ['Mem', 0.2]}
        testConfig = {'CPU': ['CPUPercentageCheck', 'SustainedHighCPUCheck'],
                      'Mem': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['MemoryUsageCheck', 'SustainedHighMemoryCheck'], 'firefox.exe': [
            'MemoryUsageCheck'], 'xmrig.exe': ['SustainedHighMemoryCheck']}

        output = DefineAndCall.determineRelevantRule(self, testMonData, testConfig)

        self.assertIsNotNone(output)
        self.assertEqual(output, expectedOutput)

    def test_determineRelevantRule7(self):
        recordClass = Recorder(False)
        detectionHistory = {'chrome.exe': {'MemoryUsageCheck': 4, 'CPUPercentageCheck': 4}, 'xmrig.exe': {'MemoryUsageCheck': 8},
                            'firefox.exe': {'MemoryUsageCheck': 7, 'SustainedHighMemoryCheck': 1}}
        fh = open("detectionHistory.pkl", "wb")
        pickle.dump(detectionHistory, fh)
        fh.close()

        testMonData = {'chrome.exe': ['Mem', 2.5], 'xmrig.exe': ['Mem', 2.49],
                       'firefox.exe': ['Mem', 2.9], 'spotify.exe': ['Mem', 0.2]}
        testConfig = {'CPU': ['CPUPercentageCheck', 'SustainedHighCPUCheck'],
                      'Mem': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['MemoryUsageCheck', 'SustainedHighMemoryCheck'], 'firefox.exe': [
            'MemoryUsageCheck'], 'xmrig.exe': ['SustainedHighMemoryCheck']}

        output = DefineAndCall.determineRelevantRule(self, testMonData, testConfig)

        self.assertIsNotNone(output)
        self.assertEqual(output, expectedOutput)

    def test_determineRelevantRule8(self):
        recordClass = Recorder(False)
        detectionHistory = {'chrome.exe': {'MemoryUsageCheck': 3, 'CPUPercentageCheck': 3}, 'xmrig.exe': {'MemoryUsageCheck': 2},
                            'firefox.exe': {'MemoryUsageCheck': 7, 'SustainedHighMemoryCheck': 1}}

        fh = open("detectionHistory.pkl", "wb")
        pickle.dump(detectionHistory, fh)
        fh.close()

        testMonData = {'chrome.exe': ['CPU', 97.7]}
        testConfig = {'CPU': ['CPUPercentageCheck', 'SustainedHighCPUCheck'],
                      'Mem': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['CPUPercentageCheck']}

        output = DefineAndCall.determineRelevantRule(self, testMonData, testConfig)

        self.assertIsNotNone(output)
        self.assertEqual(output, expectedOutput)


if __name__ == '__main__':
    file = None
    try:
        file = open("detectionHistory.pkl", "rb")

    finally:
        file.close()
    unittest.main()

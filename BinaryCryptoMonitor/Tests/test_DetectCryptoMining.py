import unittest
import sys
import pdb
sys.path.append("..")



class TestDetectCryptoMining(unittest.TestCase):

    def combineDetectionDicts(self, cpuMatches, memoryMatches):
        combinedMatches = {}
        if bool(cpuMatches):
            for key in cpuMatches:
                combinedMatches[key] = cpuMatches[key]
                if bool(memoryMatches):
                    for key2 in memoryMatches:

                        if key == key2:
                            for item in memoryMatches[key2]:
                                combinedMatches[key].append(item)
                else:
                    combinedMatches = cpuMatches

        else:
            combinedMatches = memoryMatches

        return combinedMatches

    def test_combineDetections1(self):
        cpuMatches = {}
        memoryMatches = {}

        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        self.assertEqual(combinedMatches, {})

    def test_combineDetections2(self):
        cpuMatches = {}
        memoryMatches = {'chrome.exe': ['MemoryUsageCheck']}

        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        self.assertEqual(combinedMatches, memoryMatches)

    def test_combineDetections3(self):
        cpuMatches = {'chrome.exe': ['CPUPercentageCheck']}
        memoryMatches = {}

        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        self.assertEqual(combinedMatches, cpuMatches)


    def test_combineDetections4(self):
        cpuMatches = {'chrome.exe': ['CPUPercentageCheck']}
        memoryMatches = {'chrome.exe': ['MemoryUsageCheck']}
        expectedOutput = {'chrome.exe': ['CPUPercentageCheck', 'MemoryUsageCheck']}

        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        print("combinedMatches", combinedMatches)

        self.assertEqual(combinedMatches, expectedOutput)

    def test_combineDetections5(self):
        cpuMatches = {'chrome.exe': ['CPUPercentageCheck', 'SustainedHighCPUCheck']}
        memoryMatches = {'chrome.exe': ['MemoryUsageCheck']}
        expectedOutput = {'chrome.exe': ['CPUPercentageCheck', 'SustainedHighCPUCheck', 'MemoryUsageCheck']}

        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        print("combinedMatches", combinedMatches)

        self.assertEqual(combinedMatches, expectedOutput)

    def test_combineDetections6(self):
        cpuMatches = {'chrome.exe': ['CPUPercentageCheck']}
        memoryMatches = {'chrome.exe': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['CPUPercentageCheck', 'MemoryUsageCheck', 'SustainedHighMemoryCheck']}

        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        print("combinedMatches", combinedMatches)

        self.assertEqual(combinedMatches, expectedOutput)


    def test_combineDetections7(self):
        cpuMatches = {'chrome.exe': ['CPUPercentageCheck', 'SustainedHighCPUCheck']}
        memoryMatches = {'chrome.exe': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['CPUPercentageCheck', 'SustainedHighCPUCheck', 'MemoryUsageCheck', 'SustainedHighMemoryCheck']}

        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        print("combinedMatches", combinedMatches)

        self.assertEqual(combinedMatches, expectedOutput)

    def test_combineDetections8(self):
        cpuMatches = {'chrome.exe': ['SustainedHighCPUCheck']}
        memoryMatches = {'chrome.exe': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['SustainedHighCPUCheck', 'MemoryUsageCheck', 'SustainedHighMemoryCheck']}

        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        print("combinedMatches", combinedMatches)

        self.assertEqual(combinedMatches, expectedOutput)


    def test_combineDetections9(self):
        cpuMatches = {'chrome.exe': ['SustainedHighCPUCheck']}
        memoryMatches = {'chrome.exe': ['SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['SustainedHighCPUCheck', 'SustainedHighMemoryCheck']}

        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        print("combinedMatches", combinedMatches)

        self.assertEqual(combinedMatches, expectedOutput)


    def test_combineDetections10(self):
        cpuMatches = {'chrome.exe': ['CPUPercentageCheck', 'SustainedHighCPUCheck']}
        memoryMatches = {}
        expectedOutput = {'chrome.exe': ['CPUPercentageCheck', 'SustainedHighCPUCheck']}

        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        print("combinedMatches", combinedMatches)

        self.assertEqual(combinedMatches, expectedOutput)

    def test_combineDetections11(self):
        print("\n\ntest11")
        cpuMatches = {'chrome.exe': ['CPUPercentageCheck', 'SustainedHighCPUCheck'],
        'firefox.exe': ['CPUPercentageCheck']}
        memoryMatches = {'chrome.exe': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['CPUPercentageCheck', 'SustainedHighCPUCheck',
        'MemoryUsageCheck', 'SustainedHighMemoryCheck'],
        'firefox.exe': ['CPUPercentageCheck']}

        #pdb.set_trace()
        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        print("combinedMatches", combinedMatches)

        self.assertEqual(combinedMatches, expectedOutput)

    def test_combineDetections12(self):
        cpuMatches = {'chrome.exe': ['SustainedHighCPUCheck'],
        'firefox.exe': ['CPUPercentageCheck']}
        memoryMatches = {'chrome.exe': ['MemoryUsageCheck', 'SustainedHighMemoryCheck'], 'firefox.exe': ['SustainedHighMemoryCheck']}
        expectedOutput = {'chrome.exe': ['SustainedHighCPUCheck',
        'MemoryUsageCheck', 'SustainedHighMemoryCheck'],
        'firefox.exe': ['CPUPercentageCheck', 'SustainedHighMemoryCheck']}

        #pdb.set_trace()
        combinedMatches = self.combineDetectionDicts(cpuMatches, memoryMatches)

        print("combinedMatches", combinedMatches)

        self.assertEqual(combinedMatches, expectedOutput)


if __name__ == '__main__':
    unittest.main()

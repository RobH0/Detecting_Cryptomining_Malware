import unittest
import sys
import pdb
sys.path.append("..")

from recorder import Recorder

class TestRecorder(unittest.TestCase):

    def testUpdateDetectionHistory1(self):
        rec = Recorder(True)
        rulesMetDict = {'chrome.exe': ['CPUPercentageCheck',
        'MemoryUsageCheck', 'SustainedHighMemoryCheck'],
        'firefox.exe': ['CPUPercentageCheck']}

        rec.updateDetectionHistory(rulesMetDict)

        detectionHistory1 = {'chrome.exe': {'CPUPercentageCheck': 1,
        'MemoryUsageCheck': 1, 'SustainedHighMemoryCheck': 1},
        'firefox.exe': {'CPUPercentageCheck': 1}}

        output = rec.readDetectionHistory()

        print("output: ", output)

        self.assertEqual(output, detectionHistory1)


    def testUpdateDetectionHistory2(self):
        rec = Recorder(True)
        rulesMetDict = {'chrome.exe': ['MemoryUsageCheck',
        'SustainedHighMemoryCheck'], 'firefox.exe': ['CPUPercentageCheck']}

        rec.updateDetectionHistory(rulesMetDict)

        detectionHistory1 = {'chrome.exe': {'MemoryUsageCheck': 1,
        'SustainedHighMemoryCheck': 1},
        'firefox.exe': {'CPUPercentageCheck': 1}}

        output = rec.readDetectionHistory()

        print("output: ", output)

        self.assertEqual(output, detectionHistory1)

        rulesMetDict = {'chrome.exe': ['CPUPercentageCheck',
        'SustainedHighCPUCheck', 'MemoryUsageCheck'], 'firefox.exe': ['CPUPercentageCheck']}

        rec.updateDetectionHistory(rulesMetDict)

        detectionHistory2 = {'chrome.exe': {'CPUPercentageCheck': 1,
        'MemoryUsageCheck': 2, 'SustainedHighMemoryCheck': 1, 'SustainedHighCPUCheck': 1},
        'firefox.exe': {'CPUPercentageCheck': 2}}

        self.assertEqual(rec.readDetectionHistory(), detectionHistory2)


    def testUpdateDetectionHistory3(self):
        rec = Recorder(True)
        rulesMetDict = {'chrome.exe': ['MemoryUsageCheck',
        'SustainedHighMemoryCheck'], 'firefox.exe': ['CPUPercentageCheck']}

        rec.updateDetectionHistory(rulesMetDict)

        detectionHistory1 = {'chrome.exe': {'MemoryUsageCheck': 1,
        'SustainedHighMemoryCheck': 1},
        'firefox.exe': {'CPUPercentageCheck': 1}}

        output = rec.readDetectionHistory()

        print("output: ", output)

        self.assertEqual(output, detectionHistory1)

        rulesMetDict = {'chrome.exe': ['CPUPercentageCheck',
        'SustainedHighCPUCheck', 'MemoryUsageCheck'], 'firefox.exe': ['CPUPercentageCheck']}

        rec.updateDetectionHistory(rulesMetDict)

        detectionHistory2 = {'chrome.exe': {'CPUPercentageCheck': 1,
        'MemoryUsageCheck': 2, 'SustainedHighMemoryCheck': 1, 'SustainedHighCPUCheck': 1},
        'firefox.exe': {'CPUPercentageCheck': 2}}

        self.assertEqual(rec.readDetectionHistory(), detectionHistory2)

        rulesMetDict = {'chrome.exe': ['MemoryUsageCheck'],
        'firefox.exe': ['CPUPercentageCheck', 'MemoryUsageCheck',
        'SustainedHighCPUCheck', 'SustainedHighMemoryCheck']}

        rec.updateDetectionHistory(rulesMetDict)

        detectionHistory3 = {'chrome.exe': {'CPUPercentageCheck': 1,
        'MemoryUsageCheck': 3, 'SustainedHighMemoryCheck': 1, 'SustainedHighCPUCheck': 1},'firefox.exe': {'CPUPercentageCheck': 3, 'MemoryUsageCheck': 1,
        'SustainedHighCPUCheck': 1, 'SustainedHighMemoryCheck': 1}}

        self.assertEqual(rec.readDetectionHistory(), detectionHistory3)


if __name__ == '__main__':
    unittest.main()

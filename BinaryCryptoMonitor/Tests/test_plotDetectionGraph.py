import unittest
import sys
import pdb
sys.path.append("..")


class TestGraphData(unittest.TestCase):

    def plot(self, detectionHistory):
        plotDict = {}
        configDict = {'CPU': ['CPUPercentageCheck', 'SustainedHighCPUCheck'],
        'Mem': ['MemoryUsageCheck', 'SustainedHighMemoryCheck']}

        for key, ruleList in configDict.items():
            for rule in ruleList:
                if rule not in plotDict.values():
                    plotDict[rule] = []

        for proc in detectionHistory:
            for rule in plotDict:
                try:
                    plotDict[rule].append(detectionHistory[proc][rule])
                except:
                    plotDict[rule].append(0)

        return plotDict

    def test_plotDetectionGraph1(self):
        detectionHistory = {'chrome.exe': {'CPUPercentageCheck': 1,
        'MemoryUsageCheck': 1, 'SustainedHighMemoryCheck': 1},
        'firefox.exe': {'CPUPercentageCheck': 1}}

        output = self.plot(detectionHistory)

        expectedOutput = {'CPUPercentageCheck': [1,1],
        'SustainedHighCPUCheck': [0,0], 'MemoryUsageCheck': [1,0],
        'SustainedHighMemoryCheck': [1,0]}
        self.assertNotEqual(output, {})
        self.assertEqual(output, expectedOutput)

    def test_plotDetectionGraph2(self):
        detectionHistory = {'chrome.exe': {'CPUPercentageCheck': 1,
        'MemoryUsageCheck': 1, 'SustainedHighMemoryCheck': 1},
        'firefox.exe': {'CPUPercentageCheck': 1},
        'xmrig.exe': {'CPUPercentageCheck': 1, 'MemoryUsageCheck': 2}}

        output = self.plot(detectionHistory)

        expectedOutput = {'CPUPercentageCheck': [1, 1, 1],
        'SustainedHighCPUCheck': [0 ,0, 0], 'MemoryUsageCheck': [1, 0, 2],
        'SustainedHighMemoryCheck': [1, 0, 0]}
        self.assertNotEqual(output, {})
        self.assertEqual(output, expectedOutput)

    def test_plotDetectionGraph3(self):
        detectionHistory = {'chrome.exe': {'CPUPercentageCheck': 3,
        'MemoryUsageCheck': 4, 'SustainedHighMemoryCheck': 1, 'SustainedHighCPUCheck': 3},
        'firefox.exe': {'CPUPercentageCheck': 1, 'MemoryUsageCheck': 2},
        'xmrig.exe': {'CPUPercentageCheck': 1, 'MemoryUsageCheck': 2, 'SustainedHighCPUCheck': 8},
        'claymore.exe': {'CPUPercentageCheck': 10, 'MemoryUsageCheck': 9, 'SustainedHighCPUCheck': 2, 'SustainedHighMemoryCheck': 2}}

        output = self.plot(detectionHistory)

        expectedOutput = {'CPUPercentageCheck': [3, 1, 1, 10],
        'SustainedHighCPUCheck': [3 ,0, 8, 2], 'MemoryUsageCheck': [4, 2, 2, 9],
        'SustainedHighMemoryCheck': [1, 0, 0, 2]}
        self.assertNotEqual(output, {})
        self.assertEqual(output, expectedOutput)




if __name__ == '__main__':
    unittest.main()

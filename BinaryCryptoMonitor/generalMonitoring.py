import psutil
import os
import dns.resolver
import time
import pickle

#Responsible for all general system monitoring
class SystemMonitoring:
    def __init__(self):
        processCPUData = []
        processMemoryData = []
        allProcessesMonitoringData = {}
        allProcMem = {}
        self.wl = Whitelist()
        self.whitelistData = self.wl.readWhitelist()

    #Returns a list of tuples containing the processes name and the percentage
    #of cpu it is utilising in the format (name, cpuPercentage)
    def monitorCpuUsage(self, intervalTime):
        self.allProcessesMonitoringData = {}
        self.whitelistData = self.wl.readWhitelist()

        try:
            for pro in psutil.process_iter():
                self.processCPUData = ["CPU"]
                temp = (pro.name(), pro.cpu_percent(interval = intervalTime))

                if temp[1] != 0 and temp[0].lower() not in self.whitelistData:
                    self.processCPUData.append(temp[1])
                    self.allProcessesMonitoringData[temp[0]] = self.processCPUData

            print("\nCPU monitoring data: ", end='')
            print(self.allProcessesMonitoringData)
            return self.allProcessesMonitoringData

        except:
            print("CPU utilisation monitoring isn't functioning properly.")

    #Returns a list of tuples containing process name and the percentage of
    #memory being utilised by chrome processes
    def monitorMemoryUsage(self):
        self.allProcMem = {}


        try:
            for pro in psutil.process_iter():
                self.processMemoryData = ["Mem"]
                temp = (pro.name(), pro.memory_percent())

                if temp[1] > 1 and temp[0].lower() not in self.whitelistData:
                    self.processMemoryData.append(temp[1])
                    self.allProcMem[temp[0]] = self.processMemoryData

            print("Memory monitoring data: ", end='')
            print(self.allProcMem)
            return self.allProcMem

        except:
            print("Memory utilisation monitoring isn't functioning properly")


    # Returns a list of tuples representing all connections using TCP
    def monitorConnection(self):
        self.connectionData = None

        try:
            self.connectionData = psutil.net_connections("tcp")

            return self.connectionData
        except:
            print("Monitoring TCP connections didn't work!")


    def getMiningPoolIPs(self):
        minerIPs = []

        miningPoolDomains = ['pool.minerxmr.com', 'pool.hashvault.pro',
        'pool.supportxmr.com', 'xmr.pool.minergate.com', 'xmr.eu1.nanopool.org',
        'xmr-eu2.nanopool.org', 'xmr-us-east1.nanopool.org', 'xmr-us-west1.nanopool.org',
        'xmr-asia1.nanopool.org', 'xmr-jp1.nanopool.org', 'xmr-au1.nanopool.org', 'xmrpool.eu']


        for pool in miningPoolDomains:
            try:
                queryOutput = dns.resolver.query('pool.minexmr.com', 'A')
                for data in queryOutput:
                    minerIPs.append(str(data))
                print(f"IPs found for {pool}")
            except:
                print(f"DNS query for {pool} wasn't possible!")

        poolIPFile = open("poolIPs.pkl", "wb")
        pickle.dump(minerIPs, poolIPFile)
        poolIPFile.close()

        return minerIPs





class Whitelist:

    def __init__(self):
        self.whitelist = []

    def readWhitelist(self):
        whitelistFile = open("processWhitelist.txt", "r")
        with open("processWhitelist.txt", "r") as whitelistFile:
            self.whitelist = [line.strip() for line in whitelistFile]

        return self.whitelist

    def manuallyModify(self):
        os.startfile('processWhitelist.txt')

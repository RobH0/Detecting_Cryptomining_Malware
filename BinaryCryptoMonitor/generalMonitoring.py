import psutil

#Responsible for all general system monitoring
class SystemMonitoring:
    def __init__(self):
        processCPUData = []
        processMemoryData = []
        allProcessesMonitoringData = {}
        allProcMem = {}

    #Returns a list of tuples containing the processes name and the percentage
    #of cpu it is utilising in the format (name, cpuPercentage)
    def monitorCpuUsage(self, intervalTime):
        self.allProcessesMonitoringData = {}

        try:
            for pro in psutil.process_iter():
                self.processCPUData = ["CPU"]
                temp = (pro.name(), pro.cpu_percent(interval = intervalTime))

                if temp[1] != 0 and temp[0] != 'System Idle Process':
                    self.processCPUData.append(temp[1])
                    self.allProcessesMonitoringData[temp[0]] = self.processCPUData

            print("\nCPU monitoring data: ", end='')
            print(self.allProcessesMonitoringData)
            return self.allProcessesMonitoringData

        except:
            print("CPU utilisation monitoring isn't functioning properly.")

    #Returns a list of tuples containing process name and the percentage of
    #memory being utilised by chrome processes
    def monitorMemoryUsage(self):
        self.allProcMem = {}

        try:
            for pro in psutil.process_iter():
                self.processMemoryData = ["Mem"]
                temp = (pro.name(), pro.memory_percent())

                if temp[1] > 1:
                    self.processMemoryData.append(temp[1])
                    self.allProcMem[temp[0]] = self.processMemoryData
                    
            print("Memory monitoring data: ", end='')
            print(self.allProcMem)
            return self.allProcMem

        except:
            print("Memory utilisation monitoring isn't functioning properly")


if __name__ == '__main__':
    SystemMon = SystemMonitoring()
    SystemMon.monitorCpuUsage(0.02)
    SystemMon.monitorMemoryUsage()

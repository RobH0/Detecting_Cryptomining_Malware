import yaml
from Naked.toolshed.shell import execute_js
from rules import *
import sys

class DefineAndCall:

    def __init__(self):
        pass

    #Determines which rule should be called based on comparing the contents of
    #the configuration file and the source of the monitoring data
    #Returns: A dictionary whose keys are supicious proccesses whose corresponding
    # values are the detection rules the processes has met.
    def determineRelevantRule(self, monitoringData, configuration):
        typeData = configuration.get("data")
        cpuRules = configuration.get("CPU")
        memRules = configuration.get("Mem")
        rulesMet = []
        rulesMetDict = {}

        #calls instance of rule determined by parameter set by configuration file.
        try:
            for monKey in monitoringData:
                monDataType = monitoringData.get(monKey)[0]
                monDataValues = monitoringData.get(monKey)

                for key, value in configuration.items():
                    if key == monDataType:
                        classToCall = getattr(sys.modules[__name__], value[0])
                        methodToCall = getattr(classToCall, 'check')
                        returnedValue = methodToCall(monDataValues)

                        if(returnedValue == True):
                            print(rulesMetDict)
                            try:
                                if rulesMetDict[monKey] != None:
                                    print("appending to rulesMet")
                                    rulesMetDict[monKey].append(value[0])
                                    print(rulesMetDict)
                                else:
                                    rulesMetDict[monKey] = [value[0]]
                                    print(rulesMetDict)
                            except KeyError:
                                print("exception")
                                rulesMetDict[monKey] = [value[0]]

                            print(value[0] + " returnedValue: " + str(returnedValue))
            return rulesMetDict
        except Exception as e:
            print(e)

    #Reads the configuration.yaml file and returns its contents so that the
    #contents can be later used to determine which rule should be called
    def readRuleConfiguration(self, configurationFile):
        configFile = open(configurationFile, "r")
        configurationList = yaml.load(configFile, Loader=yaml.FullLoader)
        print(configurationList)
        return configurationList

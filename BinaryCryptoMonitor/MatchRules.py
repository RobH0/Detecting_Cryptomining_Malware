import yaml
from rules import *
import sys
from inspect import signature

class DefineAndCall:

    def __init__(self):
        pass

    #Determines which rule should be called based on comparing the contents of
    #the configuration file and the source of the monitoring data
    #Returns: A dictionary whose keys are supicious proccesses whose corresponding
    # values are the detection rules the processes has met.
    def determineRelevantRule(self, monitoringData, configuration):
        typeData = configuration.get("data")
        cpuRules = configuration.get("CPU")
        memRules = configuration.get("Mem")
        rulesMet = []
        self.rulesMetDict = {}
        returnedValue = None

        #calls instance of rule determined by parameter set by configuration file.
        try:
            for monKey in monitoringData:
                monDataType = monitoringData.get(monKey)[0]
                monDataValues = monitoringData.get(monKey)

                for key, value in configuration.items():
                    if key == monDataType:
                        for rule in value:
                            #returnedValue = None
                            classToCall = getattr(sys.modules[__name__], rule)
                            methodToCall = getattr(classToCall, 'check')
                            functionArgs = list(signature(methodToCall).parameters.keys())


                            #print(f"\n\nfunctionArgs: {functionArgs}")

                            if "process" in functionArgs: ### continue with number of args to determine whether detection history is passed
                                returnedValue = methodToCall(monKey)
                            else:
                                returnedValue = methodToCall(monDataValues)

                            if(returnedValue == True):
                                if monKey in self.rulesMetDict:
                                    self.rulesMetDict[monKey].append(rule)
                                    print("if")
                                    print(f"self.rulesMetDict {self.rulesMetDict}")
                                else:
                                    self.rulesMetDict[monKey] = [rule]
                                    print("else")
                                    print(f"self.rulesMetDict {self.rulesMetDict}")
                                #self.rulesMetDict.setdefault(monKey, [rule]).append(rule)

                                print(f"rulesMetDic {self.rulesMetDict}")
                                """try:
                                    self.rulesMetDict[monKey]
                                    temp.append(rule)
                                    self.rulesMetDict[monKey] = temp
                                    print("\nTry append")
                                    print(f"self.rulesMetDict: {self.rulesMetDict[monKey]}")
                                    #if self.rulesMetDict[monKey] != None:
                                        #self.rulesMetDict[monKey].append(rule)
                                    #else:
                                    #    self.rulesMetDict[monKey] = [rule]
                                # makes new key entry if key can't be found during
                                # above if statement.
                                except KeyError:
                                    print("\n\nKey Error")
                                    self.rulesMetDict[monKey] = [rule]
                                    print(f"self.rulesMetDict: {self.rulesMetDict[monKey]}")"""

                                print(monKey + ': [' + rule + " returnedValue: " + str(returnedValue)+']')
            print(f"final rulesMet: {self.rulesMetDict}")
            return self.rulesMetDict
        except Exception as e:
            print(e)

    #Reads the configuration.yaml file and returns its contents so that the
    #contents can be later used to determine which rule should be called
    def readRuleConfiguration(self, configurationFile):
        configFile = open(configurationFile, "r")
        configurationList = yaml.load(configFile, Loader=yaml.FullLoader)
        print(f"Rule config: {configurationList}")
        return configurationList

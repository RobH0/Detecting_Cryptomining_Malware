import yaml
from rules import *
import sys
from inspect import signature

class DefineAndCall:

    def __init__(self):
        pass

    #Determines which rule should be called based on comparing the contents of
    #the configuration file and the source of the monitoring data
    #Returns: A dictionary whose keys are supicious proccesses whose corresponding
    # values are the detection rules the processes has met.
    def determineRelevantRule(self, monitoringData, configuration):
        typeData = configuration.get("data")
        cpuRules = configuration.get("CPU")
        memRules = configuration.get("Mem")
        rulesMet = []
        self.rulesMetDict = {}
        returnedValue = None

        # check if monitoring data is of type list
        if type(monitoringData) is list:
            print("A list!!")
            for index in monitoringData:
                pass
        else:
            #calls instance of rule determined by parameter set by configuration file.
            try:
                for monKey in monitoringData:
                    monDataType = monitoringData.get(monKey)[0]
                    monDataValues = monitoringData.get(monKey)

                    for key, value in configuration.items():
                        if key == monDataType:
                            for rule in value:
                                classToCall = getattr(sys.modules[__name__], rule)
                                methodToCall = getattr(classToCall, 'check')
                                functionArgs = list(signature(methodToCall).parameters.keys())

                                if "process" in functionArgs:
                                    returnedValue = methodToCall(monKey)
                                else:
                                    returnedValue = methodToCall(monDataValues)

                                if(returnedValue == True):
                                    if monKey in self.rulesMetDict:
                                        self.rulesMetDict[monKey].append(rule)
                                    else:
                                        self.rulesMetDict[monKey] = [rule]

                                    print(monKey + ': [' + rule + " returnedValue: " + str(returnedValue)+']')
                return self.rulesMetDict
            except Exception as e:
                return self.rulesMetDict

    #Reads the configuration.yaml file and returns its contents so that the
    #contents can be later used to determine which rule should be called
    def readRuleConfiguration(self, configurationFile):
        configFile = open(configurationFile, "r")
        configurationList = yaml.load(configFile, Loader=yaml.FullLoader)
        return configurationList

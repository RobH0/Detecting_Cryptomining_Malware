from datetime import datetime
import pickle

class Recorder:

    def __init__(self):
        self.detectionHistory = {}
        self.createDetectionHistory()

    # Logs rules that have been met at the time they were detected in the format
    # 2020-02-18 15:28:10.982631 | firefox.exe ['CPUPercentageCheck'].
    # param rulesMet: A dictionary whose keys are the supsicous proccesses
    # and the corresponding values are the rules the processes has met during
    # the detection round.
    def writeLog(self, rulesMet):
        formattedLog = str(datetime.now())
        formattedLog += " | "
        index = 0
        lenRuleList = len(rulesMet)

        for key in rulesMet:

            if index != (lenRuleList - 1):
                formattedLog += key + " " + str(rulesMet[key]) + ", "
            else:
                formattedLog += key + " " + str(rulesMet[key]) + "."

        formattedLog += '\n'

        logFile = open("detectionLog.txt", "a")
        logFile.write(formattedLog)
        logFile.close()

    def readLog(self):
        pass

    def createDetectionHistory(self):
        historyFile = open("detectionHistory.pkl", "wb")
        pickle.dump(self.detectionHistory, historyFile)
        historyFile.close()

    def updateDetectionHistory(self, rulesMetDict):
        historyFile = open("detectionHistory.pkl", "rb")
        self.detectionHistory = pickle.load(historyFile)
        historyFile.close()

        # key: [[rule1, 2], [rule2, 1]]
        for key in rulesMetDict:
            if key in self.detectionHistory:
                keyValues = rulesMetDict[key]
                for rule in keyValues:
                    for ruleAndCount in self.detectionHistory[key]:
                        if rule in ruleAndCount:
                            ruleAndCount[1] += 1
            else:
                keyValues = rulesMetDict[key]
                for rule in keyValues:
                    try:
                        self.detectionHistory[key].append([rule, 1])
                    except:
                        self.detectionHistory[key] = [[rule, 1]]
        #print("self.detectionHistory: " + str(self.detectionHistory))

        historyFile = open("detectionHistory.pkl", "wb")
        pickle.dump(self.detectionHistory, historyFile)
        historyFile.close()

    def readDetectionHistory(self):
        historyFile = open("detectionHistory.pkl", "rb")
        history = pickle.load(historyFile)
        historyFile.close()

        return history

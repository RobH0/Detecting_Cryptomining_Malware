from datetime import datetime
import pickle

class Recorder:

    def __init__(self):
        self.detectionHistory = {}
        self.createDetectionHistory()

    # Logs rules that have been met at the time they were detected in the format
    # 2020-02-18 15:28:10.982631 | firefox.exe ['CPUPercentageCheck'].
    # param rulesMet: A dictionary whose keys are the supsicous proccesses
    # and the corresponding values are the rules the processes has met during
    # the detection round.
    def writeLog(self, rulesMet):
        formattedLog = str(datetime.now())
        formattedLog += " | "
        index = 0
        lenRuleList = len(rulesMet)

        for key in rulesMet:

            if index != (lenRuleList - 1):
                formattedLog += key + " " + str(rulesMet[key]) + ", "
            else:
                formattedLog += key + " " + str(rulesMet[key]) + "."

        formattedLog += '\n'

        logFile = open("detectionLog.txt", "a")
        logFile.write(formattedLog)
        logFile.close()

    # Creates detectionHistory pickle file and dumps the newly initalised
    # detectionHistory dictionary within it.
    def createDetectionHistory(self):
        historyFile = open("detectionHistory.pkl", "wb")
        pickle.dump(self.detectionHistory, historyFile)
        historyFile.close()

    # Writes an updated version of the detectionHistory dictionary to the
    # detection history file using detection information collected from the most
    # recent round.
    def updateDetectionHistory(self, rulesMetDict):
        historyFile = open("detectionHistory.pkl", "rb")
        self.detectionHistory = pickle.load(historyFile)
        historyFile.close()

        for key in rulesMetDict:
            if key in self.detectionHistory:
                for rule in rulesMetDict[key]:
                    if rule in self.detectionHistory[key]:
                        self.detectionHistory[key][rule] += 1
                    else:
                        self.detectionHistory[key][rule] = 1
            else:
                tempRulesDict = {}
                for rule in rulesMetDict[key]:
                    tempRulesDict[rule] = 1

                self.detectionHistory[key] = tempRulesDict

        historyFile = open("detectionHistory.pkl", "wb")
        pickle.dump(self.detectionHistory, historyFile)
        historyFile.close()

    def readDetectionHistory(self):
        historyFile = open("detectionHistory.pkl", "rb")
        history = pickle.load(historyFile)
        historyFile.close()

        return history

if __name__ == '__main__':
    history = {"Memory Compression": ["MemoryUsageCheck"], "firefox.exe": ["CPUPercentageCheck", "MemoryUsageCheck"]}
    print(f"history: {history}")
    rec = Recorder()
    rec.updateDetectionHistory(history)
    returnedDict = rec.readDetectionHistory()
    print(f"returnedDict: {returnedDict}")

    history = {"Memory Compression": ["MemoryUsageCheck"], "firefox.exe": ["CPUPercentageCheck"]}

    rec.updateDetectionHistory(history)
    returnedDict = rec.readDetectionHistory()
    print(f"returnedDict: {returnedDict}")

#DetectCryptoMining
from generalMonitoring import SystemMonitoring
from MatchRules import *
from gui import *
from recorder import *
from mockGUI import *
import time


#Responsible for Initiating the whole program.
class DetectCryptoMining:
    def __init__(self):
        self.systemMon = SystemMonitoring()
        self.defAndCall = DefineAndCall()
        self.configFile = self.defAndCall.readRuleConfiguration('configuration.yaml')
        self.recorder = Recorder()
        #self.gui = GUI(self)
        self.gui = GUI2(self)
        self.gui.mainGUI()


    #Controls the order in which data is monitored and then evaluated.
    def main(self):
        rulesMet = None
        stopButtonStatus = False
        detectionRoundCount = 1

        while stopButtonStatus == False:
            cpuMatches = {}
            memoryMatches = {}
            combinedMatches = {}

            print("\n\n\nDETECTION ROUND: " + str(detectionRoundCount))
            detectionRoundCount+= 1

            stopButtonStatus = self.gui.checkStop()
            cpuData = self.systemMon.monitorCpuUsage(0.01)
            stopButtonStatus = self.gui.checkStop()
            memoryData = self.systemMon.monitorMemoryUsage()

            stopButtonStatus = self.gui.checkStop()

            print("\nRules met by processes: ")
            cpuMatches = self.defAndCall.determineRelevantRule(cpuData, self.configFile)
            memoryMatches = self.defAndCall.determineRelevantRule(memoryData, self.configFile)

            # merging dictionaries that contain the rules met for given
            # given processes during the current detection round.
            print(f"cpuMatches: {cpuMatches}")
            if bool(cpuMatches):
                for key in cpuMatches:
                    for key2 in memoryMatches:
                        print(key)
                        print(key2)
                        combinedMatches[key] = cpuMatches[key]
                        if key == key2:
                            print("\nIn if statement")
                            updateListValue = cpuMatches[key]
                            #print(f"updateListValue: {updateListValue}")
                            updateListValue.append(memoryMatches[key2][0])
                            #print(f"memoryMatches[key2]: {memoryMatches[key2]}")
                            #print(f"memoryMatches[key2][0]: {memoryMatches[key2][0]}")
                            print(f"updateListValue: {updateListValue}")
                            combinedMatches[key] = updateListValue
                        else:
                            combinedMatches[key2] = memoryMatches[key2]

            else:
                combinedMatches = memoryMatches
            print(f"\n\nnewCpuMatches {combinedMatches}")
            #cpuMatches.update(memoryMatches)


            if len(combinedMatches) != None and len(combinedMatches) != 0:
                self.recorder.updateDetectionHistory(combinedMatches)
                detectionHist = self.recorder.readDetectionHistory()
                #self.gui.createPrevDetectionTable(cpuMatches)
                self.gui.updateTables(combinedMatches, detectionHist)
                self.recorder.writeLog(combinedMatches)
                print(combinedMatches)

                #temp = self.recorder.readDetectionHistory()
                #self.gui.createMiningProcessTable(temp)
            else:
                print("\nNo rules were met at this instance.\n")

            stopButtonStatus = self.gui.checkStop()

        print("\nMonitoring has now been stopped.\n")
        self.gui.toggleStopButton()


if __name__ == '__main__':
    mainProg = DetectCryptoMining()

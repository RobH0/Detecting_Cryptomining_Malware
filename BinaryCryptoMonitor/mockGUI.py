# mockGUI

from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
import matplotlib.pyplot as plt

import random
import numpy


class GUI:
    def __init__(self):
        self.app = QApplication([])
        self.window = QWidget()
        self.layout = QVBoxLayout()
        self.window.setWindowTitle("DetectCryptoMining")

        self.screen = self.app.primaryScreen()
        screenDimensions = self.screen.availableGeometry()
        self.window.setGeometry((screenDimensions.width() / 2 - 550), (screenDimensions.height() / 2 - 700), 1200, 1600)

        self.titleLabel = QLabel("DetectCryptoMining\n")
        self.titleLabel.setAlignment(Qt.AlignCenter)
        self.roundTableTitle = QLabel("Previous monitoring round detections:")
        self.miningTableTitle = QLabel("Potential mining processes:")

        self.startMonBtn = QPushButton('Start Monitoring')
        self.stopMonBtn = QPushButton('Stop Monitoring')

        self.figure = plt.figure()
        self.canvas = FigureCanvas(self.figure)
        self.toolbar = NavigationToolbar(self.canvas, self.window)

    def mainGUI(self):

        self.createPrevDetectionTable()
        self.createMiningProcessTable()
        self.plotDetectionGraph()
        self.layout.addWidget(self.titleLabel)
        self.layout.addWidget(self.startMonBtn)
        self.layout.addWidget(self.stopMonBtn)
        self.layout.addWidget(self.roundTableTitle)
        self.layout.addWidget(self.table)
        self.layout.addWidget(self.toolbar)
        self.layout.addWidget(self.canvas)
        self.layout.addWidget(self.miningTableTitle)
        self.layout.addWidget(self.miningProTable)
        self.window.setLayout(self.layout)

        self.window.show()
        self.app.exec_()

    def createPrevDetectionTable(self):
        self.table = QTableWidget()
        self.table.setRowCount(3)
        self.table.setColumnCount(2)

        self.table.setItem(0, 0, QTableWidgetItem("Process"))
        self.table.setItem(0, 1, QTableWidgetItem("Rules met previous round"))
        self.table.setColumnWidth(1, 500)
        self.table.verticalHeader().setVisible(False)
        self.table.horizontalHeader().setVisible(False)
        self.table.setColumnWidth(1, 350)
        self.table.setRowHeight(1, 120)

        self.table.setItem(1, 0, QTableWidgetItem("xmrig.exe"))
        self.table.setItem(1, 1, QTableWidgetItem("CPUPercentageCheck,\nMemoryUsageCheck"))

        self.table.setItem(2, 0, QTableWidgetItem("chrome.exe"))
        self.table.setItem(2, 1, QTableWidgetItem("MemoryUsageCheck"))

    def createMiningProcessTable(self):
        self.miningProTable = QTableWidget()
        self.miningProTable.setRowCount(3)
        self.miningProTable.setColumnCount(3)
        self.miningProTable.verticalHeader().setVisible(False)
        self.miningProTable.horizontalHeader().setVisible(False)
        self.miningProTable.setColumnWidth(1, 350)
        self.miningProTable.setRowHeight(1, 120)
        self.miningProTable.setColumnWidth(2, 400)
        self.miningProTable.setRowHeight(2, 120)


        #Process buttons
        self.killXmrigBtn = QPushButton('Kill xmrig process')
        self.killChromeBtn = QPushButton('Kill chrome process')

        self.miningProTable.setItem(0, 0, QTableWidgetItem("Process"))
        self.miningProTable.setItem(0, 1, QTableWidgetItem("Total Rules Met"))


        self.miningProTable.setItem(1, 0, QTableWidgetItem("xmrig.exe"))
        self.miningProTable.setItem(1, 1, QTableWidgetItem("CPUPercentageCheck: x4,\nMemoryUsageCheck: x3"))
        self.miningProTable.setCellWidget(1,2, self.killXmrigBtn)

        self.miningProTable.setItem(2,0, QTableWidgetItem("chrome.exe"))
        self.miningProTable.setItem(2,1, QTableWidgetItem("CPUPercentageCheck: x1,\nMemoryUsageCheck:x2"))
        self.miningProTable.setCellWidget(2,2, self.killChromeBtn)

    def plotDetectionGraph(self):
        processesList = ["xmrig.exe", "chrome.exe"]
        CPUPercentageCheckData = [4, 1]
        MemoryUsageCheckData = [3, 2]
        xAxis = numpy.arange(len(CPUPercentageCheckData))
        barWidth = 0.2

        self.figure.clear()

        ax = self.figure.add_subplot(111)
        ax.grid(axis='y')

        ax.bar(xAxis, CPUPercentageCheckData, width = barWidth, label="CPUPercentageCheck")
        ax.bar(xAxis + barWidth, MemoryUsageCheckData, width = barWidth, label="MemoryUsageCheck")

        ax.set_xticks(xAxis + barWidth*0.5)
        ax.set_xticklabels(processesList)
        ax.set_title("Supicious Processes")
        ax.set_xlabel("Processes")
        ax.set_ylabel("Number of detections")

        ax.legend()

        self.canvas.draw()


if __name__ == '__main__':
    gui = GUI()
    gui.mainGUI()

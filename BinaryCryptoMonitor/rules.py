#Rules
from recorder import Recorder

# Checks whether cpu utilisation of data passed is suspiciously high
class CPUPercentageCheck():

    def __init__(self):
        pass

    def check(cpuMonitoringData):
        metOnce = False

        for x in cpuMonitoringData[1:len(cpuMonitoringData)]:
            if(float(x) >= 60):
                metOnce = True
            else:
                metOnce = False
        return metOnce


# Checks whether memory consumption of data passed is suspiciously high
class MemoryUsageCheck():

    def __init__(self):
        pass

    def check(memoryMonitoringData):
        for x in memoryMonitoringData[1:len(memoryMonitoringData)]:
            if(float(x) >= 1):
                return True
            else:
                return False


class SustainedHighCPUCheck():

    def __init__(self):
        pass

    def check(process):##need to pass process name to rules
        detectionHist = Recorder(False).readDetectionHistory()
        processDict = {}
        if process in detectionHist:
            processDict = detectionHist[process]
            detectionCount = processDict["CPUPercentageCheck"]

            if detectionCount % 4 == 0:
                return True
            else:
                return False

        return False
        #print(f"process {process}")

class SustainedHighMemoryCheck():

    def __init__(self):
        pass

    def check(process):
        rec = Recorder(False)
        detectionHist = rec.readDetectionHistory()
        processDict = {}
        detectionCount = 0

        if process in detectionHist:
            processDict = detectionHist[process]
            processDict = detectionHist[process]
            detectionCount = processDict["MemoryUsageCheck"]
            if detectionCount % 4 == 0:
                return True
            else:
                return False

        return False

class MiningPoolConnection():

    def __init__(self):
        pass

    # COMPLETE THIS LATER!!
    def check(connectionData):
        rec = Recorder(False)

        poolIPs = rec.readPoolIPs()

        return True

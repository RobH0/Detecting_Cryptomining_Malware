# All pyqt thread classes
from PyQt5.QtCore import QThread, pyqtSignal, QRunnable, QObject
from DetectCryptoMining import *
from mitigations import *


class StartMonThread(QRunnable):
    """
    Class that enables monitoring and detection to be initiated in a seperate thread from the gui's code execution.

    :param mainProgram: An instance of the :class:`DetectCryptoMining.DetectCryptoMining` class.
    :type mainProgram: class:`DetectCryptoMining.DetectCryptoMining`
    """

    def __init__(self, mainProgram):
        """Constructor method"""
        self.mainProg = mainProgram
        super(StartMonThread, self).__init__()
        self.signals = Signals()

    @pyqtSlot()
    def run(self):
        """Starts the execution of monitoring and detection within a seperate thread from the GUI."""
        self.mainProg.main(self.signals)


class KillProcThread(QRunnable):
    """
    Class that enables processes to be killed within a seperate thread.

    :param processName: The name of the process to be killed.
    :type processName: str
    """

    def __init__(self, processName):
        """Constructor method"""
        self.mitigate = KillMiner
        self.procName = processName
        super(KillProcThread, self).__init__()

    @pyqtSlot()
    def run(self):
        """Starts the execution of killing a process in a new thread."""
        self.mitigate.killMiningProcess(self, self.procName)


class Signals(QObject):
    """Defines pyqt signals."""
    updateGUI = pyqtSignal(dict, dict)

#psutil general cpu monitoring script
import psutil

class SystemMonitoring:
    def __init__(self):
        chromeCPUData = []
        chromeMemoryData = []

    #returns a list of tuples containing the processes name and the percentage
    #of cpu it is utilising in the format (name, cpuPercentage)
    def monitorCpuUsage(self, intervalTime):
        self.chromeCPUData = []
        self.chromeCPUData.append("CPU")
        for pro in psutil.process_iter():
            if pro.name() == 'chrome.exe':
                #print(pro.name()+ ": " +str(pro.cpu_percent(interval=1)) + "%")
                temp = (pro.name(), pro.cpu_percent(interval = intervalTime))
                if temp[1] != 0:
                    self.chromeCPUData.append(temp)
        return self.chromeCPUData

    #returns a list of tuples containing process name and the percentage of
    #memory being utilised by chrome processes
    def monitorMemoryUsage(self):
        self.chromeMemoryData = []
        self.chromeMemoryData.append("Mem")
        for pro in psutil.process_iter():
            if pro.name() == 'chrome.exe':
                temp = (pro.name(), pro.memory_percent())
                if temp[1] != 0:
                    self.chromeMemoryData.append(temp)
        return self.chromeMemoryData



"""if __name__ == '__main__':
    generalMon = SystemMonitoring()
    tempReturnCpu = []
    tempReturnMem = []
    tempReturnCpu = generalMon.monitorCpuUsage(1)
    tempReturnMem = generalMon.monitorMemoryUsage()
    print(tempReturnCpu)
    print("\n" + str(tempReturnMem))"""

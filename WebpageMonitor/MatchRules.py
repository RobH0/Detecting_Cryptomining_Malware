import yaml
from Naked.toolshed.shell import execute_js
from rules import *
import sys

class DefineAndCall:

    def __init__(self):
        pass

    #Determines which rule should be called based on comparing the contents of
    #the configuration file and the source of the monitoring data
    #Returns: A list of the names of the rules whose conditions were met.
    def determineRelevantRule(self, monitoringData, configuration):
        typeData = configuration.get("data")
        cpuRules = configuration.get("CPU")
        memRules = configuration.get("Mem")
        rulesMet = []


        #calls instance of rule determined by parameter set by configuration file.
        for key, value in configuration.items():
            if key == monitoringData[0]:
                print("Key: " + key)
                print("Value: " + value[0])
                classToCall = getattr(sys.modules[__name__], value[0])
                methodToCall = getattr(classToCall, 'check')
                returnedValue = methodToCall(monitoringData)
                print(value[0] + " returnedValue: " + str(returnedValue))
                if(returnedValue == True):
                    rulesMet.append(value[0])


        return rulesMet


    #Reads the configuration.yaml file and returns its contents so that the
    #contents can be later used to determine which rule should be called
    def readRuleConfiguration(self, configurationFile):
        configFile = open(configurationFile, "r")
        configurationList = yaml.load(configFile, Loader=yaml.FullLoader)
        print(configurationList)
        return configurationList

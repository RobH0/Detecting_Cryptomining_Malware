#This class determines which rules should be called based on the type of data
#returned by monitoring functions

import yaml
from Naked.toolshed.shell import execute_js
from rules import *

class DefineAndCall:

    def __init__(self):
        pass

    def determineDataSource(self, monitoringData):
        pass

    #Determines which rule should be called based on comparing the contents of
    #the configuration file and the source of the monitoring data
    def determineRelevantRule(self, monitoringData, configuration):
        typeData = configuration.get("data")
        for x in typeData:
            if monitoringData[0] == x and x == "CPU":
                CPUPercentageCheck(monitoringData)
            elif monitoringData[0] == x and x == "Mem":
                MemoryUsageCheck(monitoringData)

    #reads the configuration.yaml file and returns its contents so that the
    #contents can be later used to determine which rule should be called
    def readRuleConfiguration(self, configurationFile):
        configFile = open(configurationFile, "r")
        configurationList = yaml.load(configFile, Loader=yaml.FullLoader)
        print(configurationList)
        return configurationList

    def determineDataType(self, monitoringData):
        pass

    def notifyUserOfActivity(self):
        print("Suscpious activity detected!")



"""if __name__ == "__main__":
    print("running")
    defAndCall = DefineAndCall()
    config = defAndCall.readRuleConfiguration('configuration.yaml')
    defAndCall.determineRelevantRule('test', config)"""

#This class determines which rules should be called based on the type of data
#returned by monitoring functions

import yaml

class DefineAndCall:

    def __init__(self):
        pass

    def determineDataSource(self, monitoringData):
        pass

    def determineRelevantRule(self, monitoringData, configuraiton):
        pass

    #reads the configuration.yaml file and returns its contents so that the
    #contents can be later used to determine which rule should be called
    def readRuleConfiguration(self, configurationFile):
        configFile = open(configurationFile, "r")
        configurationList = yaml.load(configFile, Loader=yaml.FullLoader)
        print(configurationList)
        return configurationList



    def determineDataType(self, monitoringData):
        pass



if __name__ == "__main__":
    print("running")
    defAndCall = DefineAndCall()
    defAndCall.readRuleConfiguration('configuration.yaml')

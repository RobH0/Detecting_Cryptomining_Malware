#This class determines which rules should be called based on the type of data
#returned by monitoring functions

import yaml
from Naked.toolshed.shell import execute_js
from rules import *
import sys

class DefineAndCall:

    def __init__(self):
        #self.MemoryUsageCheck = MemoryUsageCheck()
        pass

    def determineDataSource(self, monitoringData):
        pass

    #Determines which rule should be called based on comparing the contents of
    #the configuration file and the source of the monitoring data
    def determineRelevantRule(self, monitoringData, configuration):
        typeData = configuration.get("data")
        cpuRules = configuration.get("CPU")
        memRules = configuration.get("Mem")

        for key, value in configuration.items():
            if key == monitoringData[0] and key != 'CPU':
                print("Key: " + key)
                print("Value: " + value[0])
                classToCall = getattr(sys.modules[__name__], value[0])
                methodToCall = getattr(classToCall, 'check')
                methodToCall(monitoringData)


        """for x in typeData:
            if monitoringData[0] == x and x == "CPU":
                CPUPercentageCheck(monitoringData)
                eval('MemoryUsageCheck')
            elif monitoringData[0] == x and x == "Mem":
                callMethod = getattr(MemoryUsageCheck, 'check')
                callMethod(monitoringData)"""


    #reads the configuration.yaml file and returns its contents so that the
    #contents can be later used to determine which rule should be called
    def readRuleConfiguration(self, configurationFile):
        configFile = open(configurationFile, "r")
        configurationList = yaml.load(configFile, Loader=yaml.FullLoader)
        print(configurationList)
        return configurationList

    def determineDataType(self, monitoringData):
        pass

    def notifyUserOfActivity(self):
        print("Suscpious activity detected!")



"""if __name__ == "__main__":
    print("running")
    defAndCall = DefineAndCall()
    config = defAndCall.readRuleConfiguration('configuration.yaml')
    print(config)"""
    #defAndCall.determineRelevantRule('test', config)

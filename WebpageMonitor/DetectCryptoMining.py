#DetectCryptoMining
from generalMonitoring import SystemMonitoring
from MatchRules import *
from gui import *
import time


#Responsible for Initiating the whole program.
class DetectCryptoMining:
    def __init__(self):
        self.systemMon = SystemMonitoring()
        self.defAndCall = DefineAndCall()
        self.gui = GUI(self)
        self.gui.mainGUI()

    #Controls the order in which data is monitored and then evaluated.
    def main(self):
        rulesMet = []
        stopButtonStatus = False
        configFile = self.defAndCall.readRuleConfiguration('configuration.yaml')

        while stopButtonStatus == False:
            cpuData = self.systemMon.monitorCpuUsage(1)
            memoryData = self.systemMon.monitorMemoryUsage()

            stopButtonStatus = self.gui.checkStop()

            cpuMatches = self.defAndCall.determineRelevantRule(cpuData, configFile)
            memoryMatches = self.defAndCall.determineRelevantRule(memoryData, configFile)
            rulesMet = cpuMatches + memoryMatches

            if len(rulesMet) != 0:
                self.gui.notifyUserOfActivity(rulesMet)
                print("Some rules where met on this instance.\n")
            else:
                print("No rules were met at this instance.\n")

            stopButtonStatus = self.gui.checkStop()

        print("\nMonitoring has now been stopped.")


if __name__ == '__main__':
    mainProg = DetectCryptoMining()
